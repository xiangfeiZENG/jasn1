/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class CamelServiceUsed implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 57);

	public byte[] code = null;
	private CamelServiceLevel camelServiceLevel = null;
	private CamelServiceKey camelServiceKey = null;
	private DefaultCallHandlingIndicator defaultCallHandling = null;
	private ExchangeRateCode exchangeRateCode = null;
	private TaxInformationList taxInformation = null;
	private DiscountInformation discountInformation = null;
	private CamelInvocationFee camelInvocationFee = null;
	private ThreeGcamelDestination threeGcamelDestination = null;
	private CseInformation cseInformation = null;
	
	public CamelServiceUsed() {
	}

	public CamelServiceUsed(byte[] code) {
		this.code = code;
	}

	public void setCamelServiceLevel(CamelServiceLevel camelServiceLevel) {
		this.camelServiceLevel = camelServiceLevel;
	}

	public CamelServiceLevel getCamelServiceLevel() {
		return camelServiceLevel;
	}

	public void setCamelServiceKey(CamelServiceKey camelServiceKey) {
		this.camelServiceKey = camelServiceKey;
	}

	public CamelServiceKey getCamelServiceKey() {
		return camelServiceKey;
	}

	public void setDefaultCallHandling(DefaultCallHandlingIndicator defaultCallHandling) {
		this.defaultCallHandling = defaultCallHandling;
	}

	public DefaultCallHandlingIndicator getDefaultCallHandling() {
		return defaultCallHandling;
	}

	public void setExchangeRateCode(ExchangeRateCode exchangeRateCode) {
		this.exchangeRateCode = exchangeRateCode;
	}

	public ExchangeRateCode getExchangeRateCode() {
		return exchangeRateCode;
	}

	public void setTaxInformation(TaxInformationList taxInformation) {
		this.taxInformation = taxInformation;
	}

	public TaxInformationList getTaxInformation() {
		return taxInformation;
	}

	public void setDiscountInformation(DiscountInformation discountInformation) {
		this.discountInformation = discountInformation;
	}

	public DiscountInformation getDiscountInformation() {
		return discountInformation;
	}

	public void setCamelInvocationFee(CamelInvocationFee camelInvocationFee) {
		this.camelInvocationFee = camelInvocationFee;
	}

	public CamelInvocationFee getCamelInvocationFee() {
		return camelInvocationFee;
	}

	public void setThreeGcamelDestination(ThreeGcamelDestination threeGcamelDestination) {
		this.threeGcamelDestination = threeGcamelDestination;
	}

	public ThreeGcamelDestination getThreeGcamelDestination() {
		return threeGcamelDestination;
	}

	public void setCseInformation(CseInformation cseInformation) {
		this.cseInformation = cseInformation;
	}

	public CseInformation getCseInformation() {
		return cseInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (cseInformation != null) {
			codeLength += cseInformation.encode(reverseOS, true);
		}
		
		if (threeGcamelDestination != null) {
			codeLength += threeGcamelDestination.encode(reverseOS, true);
		}
		
		if (camelInvocationFee != null) {
			codeLength += camelInvocationFee.encode(reverseOS, true);
		}
		
		if (discountInformation != null) {
			codeLength += discountInformation.encode(reverseOS, true);
		}
		
		if (taxInformation != null) {
			codeLength += taxInformation.encode(reverseOS, true);
		}
		
		if (exchangeRateCode != null) {
			codeLength += exchangeRateCode.encode(reverseOS, true);
		}
		
		if (defaultCallHandling != null) {
			codeLength += defaultCallHandling.encode(reverseOS, true);
		}
		
		if (camelServiceKey != null) {
			codeLength += camelServiceKey.encode(reverseOS, true);
		}
		
		if (camelServiceLevel != null) {
			codeLength += camelServiceLevel.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(CamelServiceLevel.tag)) {
			camelServiceLevel = new CamelServiceLevel();
			subCodeLength += camelServiceLevel.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CamelServiceKey.tag)) {
			camelServiceKey = new CamelServiceKey();
			subCodeLength += camelServiceKey.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(DefaultCallHandlingIndicator.tag)) {
			defaultCallHandling = new DefaultCallHandlingIndicator();
			subCodeLength += defaultCallHandling.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ExchangeRateCode.tag)) {
			exchangeRateCode = new ExchangeRateCode();
			subCodeLength += exchangeRateCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TaxInformationList.tag)) {
			taxInformation = new TaxInformationList();
			subCodeLength += taxInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(DiscountInformation.tag)) {
			discountInformation = new DiscountInformation();
			subCodeLength += discountInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CamelInvocationFee.tag)) {
			camelInvocationFee = new CamelInvocationFee();
			subCodeLength += camelInvocationFee.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ThreeGcamelDestination.tag)) {
			threeGcamelDestination = new ThreeGcamelDestination();
			subCodeLength += threeGcamelDestination.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CseInformation.tag)) {
			cseInformation = new CseInformation();
			subCodeLength += cseInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (camelServiceLevel != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("camelServiceLevel: ").append(camelServiceLevel);
			firstSelectedElement = false;
		}
		
		if (camelServiceKey != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("camelServiceKey: ").append(camelServiceKey);
			firstSelectedElement = false;
		}
		
		if (defaultCallHandling != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("defaultCallHandling: ").append(defaultCallHandling);
			firstSelectedElement = false;
		}
		
		if (exchangeRateCode != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("exchangeRateCode: ").append(exchangeRateCode);
			firstSelectedElement = false;
		}
		
		if (taxInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("taxInformation: ");
			taxInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (discountInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("discountInformation: ");
			discountInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (camelInvocationFee != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("camelInvocationFee: ").append(camelInvocationFee);
			firstSelectedElement = false;
		}
		
		if (threeGcamelDestination != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("threeGcamelDestination: ");
			threeGcamelDestination.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (cseInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cseInformation: ").append(cseInformation);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

