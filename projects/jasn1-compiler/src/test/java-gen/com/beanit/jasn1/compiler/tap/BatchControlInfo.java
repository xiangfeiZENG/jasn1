/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class BatchControlInfo implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 4);

	public byte[] code = null;
	private Sender sender = null;
	private Recipient recipient = null;
	private FileSequenceNumber fileSequenceNumber = null;
	private FileCreationTimeStamp fileCreationTimeStamp = null;
	private TransferCutOffTimeStamp transferCutOffTimeStamp = null;
	private FileAvailableTimeStamp fileAvailableTimeStamp = null;
	private SpecificationVersionNumber specificationVersionNumber = null;
	private ReleaseVersionNumber releaseVersionNumber = null;
	private FileTypeIndicator fileTypeIndicator = null;
	private RapFileSequenceNumber rapFileSequenceNumber = null;
	private OperatorSpecInfoList operatorSpecInformation = null;
	
	public BatchControlInfo() {
	}

	public BatchControlInfo(byte[] code) {
		this.code = code;
	}

	public void setSender(Sender sender) {
		this.sender = sender;
	}

	public Sender getSender() {
		return sender;
	}

	public void setRecipient(Recipient recipient) {
		this.recipient = recipient;
	}

	public Recipient getRecipient() {
		return recipient;
	}

	public void setFileSequenceNumber(FileSequenceNumber fileSequenceNumber) {
		this.fileSequenceNumber = fileSequenceNumber;
	}

	public FileSequenceNumber getFileSequenceNumber() {
		return fileSequenceNumber;
	}

	public void setFileCreationTimeStamp(FileCreationTimeStamp fileCreationTimeStamp) {
		this.fileCreationTimeStamp = fileCreationTimeStamp;
	}

	public FileCreationTimeStamp getFileCreationTimeStamp() {
		return fileCreationTimeStamp;
	}

	public void setTransferCutOffTimeStamp(TransferCutOffTimeStamp transferCutOffTimeStamp) {
		this.transferCutOffTimeStamp = transferCutOffTimeStamp;
	}

	public TransferCutOffTimeStamp getTransferCutOffTimeStamp() {
		return transferCutOffTimeStamp;
	}

	public void setFileAvailableTimeStamp(FileAvailableTimeStamp fileAvailableTimeStamp) {
		this.fileAvailableTimeStamp = fileAvailableTimeStamp;
	}

	public FileAvailableTimeStamp getFileAvailableTimeStamp() {
		return fileAvailableTimeStamp;
	}

	public void setSpecificationVersionNumber(SpecificationVersionNumber specificationVersionNumber) {
		this.specificationVersionNumber = specificationVersionNumber;
	}

	public SpecificationVersionNumber getSpecificationVersionNumber() {
		return specificationVersionNumber;
	}

	public void setReleaseVersionNumber(ReleaseVersionNumber releaseVersionNumber) {
		this.releaseVersionNumber = releaseVersionNumber;
	}

	public ReleaseVersionNumber getReleaseVersionNumber() {
		return releaseVersionNumber;
	}

	public void setFileTypeIndicator(FileTypeIndicator fileTypeIndicator) {
		this.fileTypeIndicator = fileTypeIndicator;
	}

	public FileTypeIndicator getFileTypeIndicator() {
		return fileTypeIndicator;
	}

	public void setRapFileSequenceNumber(RapFileSequenceNumber rapFileSequenceNumber) {
		this.rapFileSequenceNumber = rapFileSequenceNumber;
	}

	public RapFileSequenceNumber getRapFileSequenceNumber() {
		return rapFileSequenceNumber;
	}

	public void setOperatorSpecInformation(OperatorSpecInfoList operatorSpecInformation) {
		this.operatorSpecInformation = operatorSpecInformation;
	}

	public OperatorSpecInfoList getOperatorSpecInformation() {
		return operatorSpecInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (operatorSpecInformation != null) {
			codeLength += operatorSpecInformation.encode(reverseOS, true);
		}
		
		if (rapFileSequenceNumber != null) {
			codeLength += rapFileSequenceNumber.encode(reverseOS, true);
		}
		
		if (fileTypeIndicator != null) {
			codeLength += fileTypeIndicator.encode(reverseOS, true);
		}
		
		if (releaseVersionNumber != null) {
			codeLength += releaseVersionNumber.encode(reverseOS, true);
		}
		
		if (specificationVersionNumber != null) {
			codeLength += specificationVersionNumber.encode(reverseOS, true);
		}
		
		if (fileAvailableTimeStamp != null) {
			codeLength += fileAvailableTimeStamp.encode(reverseOS, true);
		}
		
		if (transferCutOffTimeStamp != null) {
			codeLength += transferCutOffTimeStamp.encode(reverseOS, true);
		}
		
		if (fileCreationTimeStamp != null) {
			codeLength += fileCreationTimeStamp.encode(reverseOS, true);
		}
		
		if (fileSequenceNumber != null) {
			codeLength += fileSequenceNumber.encode(reverseOS, true);
		}
		
		if (recipient != null) {
			codeLength += recipient.encode(reverseOS, true);
		}
		
		if (sender != null) {
			codeLength += sender.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(Sender.tag)) {
			sender = new Sender();
			subCodeLength += sender.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(Recipient.tag)) {
			recipient = new Recipient();
			subCodeLength += recipient.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(FileSequenceNumber.tag)) {
			fileSequenceNumber = new FileSequenceNumber();
			subCodeLength += fileSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(FileCreationTimeStamp.tag)) {
			fileCreationTimeStamp = new FileCreationTimeStamp();
			subCodeLength += fileCreationTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TransferCutOffTimeStamp.tag)) {
			transferCutOffTimeStamp = new TransferCutOffTimeStamp();
			subCodeLength += transferCutOffTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(FileAvailableTimeStamp.tag)) {
			fileAvailableTimeStamp = new FileAvailableTimeStamp();
			subCodeLength += fileAvailableTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(SpecificationVersionNumber.tag)) {
			specificationVersionNumber = new SpecificationVersionNumber();
			subCodeLength += specificationVersionNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ReleaseVersionNumber.tag)) {
			releaseVersionNumber = new ReleaseVersionNumber();
			subCodeLength += releaseVersionNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(FileTypeIndicator.tag)) {
			fileTypeIndicator = new FileTypeIndicator();
			subCodeLength += fileTypeIndicator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RapFileSequenceNumber.tag)) {
			rapFileSequenceNumber = new RapFileSequenceNumber();
			subCodeLength += rapFileSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(OperatorSpecInfoList.tag)) {
			operatorSpecInformation = new OperatorSpecInfoList();
			subCodeLength += operatorSpecInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (sender != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sender: ").append(sender);
			firstSelectedElement = false;
		}
		
		if (recipient != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recipient: ").append(recipient);
			firstSelectedElement = false;
		}
		
		if (fileSequenceNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fileSequenceNumber: ").append(fileSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (fileCreationTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fileCreationTimeStamp: ");
			fileCreationTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (transferCutOffTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transferCutOffTimeStamp: ");
			transferCutOffTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (fileAvailableTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fileAvailableTimeStamp: ");
			fileAvailableTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (specificationVersionNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("specificationVersionNumber: ").append(specificationVersionNumber);
			firstSelectedElement = false;
		}
		
		if (releaseVersionNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("releaseVersionNumber: ").append(releaseVersionNumber);
			firstSelectedElement = false;
		}
		
		if (fileTypeIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fileTypeIndicator: ").append(fileTypeIndicator);
			firstSelectedElement = false;
		}
		
		if (rapFileSequenceNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rapFileSequenceNumber: ").append(rapFileSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (operatorSpecInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("operatorSpecInformation: ");
			operatorSpecInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

