/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class ContentTransactionBasicInfo implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 304);

	public byte[] code = null;
	private RapFileSequenceNumber rapFileSequenceNumber = null;
	private OrderPlacedTimeStamp orderPlacedTimeStamp = null;
	private RequestedDeliveryTimeStamp requestedDeliveryTimeStamp = null;
	private ActualDeliveryTimeStamp actualDeliveryTimeStamp = null;
	private TotalTransactionDuration totalTransactionDuration = null;
	private TransactionStatus transactionStatus = null;
	
	public ContentTransactionBasicInfo() {
	}

	public ContentTransactionBasicInfo(byte[] code) {
		this.code = code;
	}

	public void setRapFileSequenceNumber(RapFileSequenceNumber rapFileSequenceNumber) {
		this.rapFileSequenceNumber = rapFileSequenceNumber;
	}

	public RapFileSequenceNumber getRapFileSequenceNumber() {
		return rapFileSequenceNumber;
	}

	public void setOrderPlacedTimeStamp(OrderPlacedTimeStamp orderPlacedTimeStamp) {
		this.orderPlacedTimeStamp = orderPlacedTimeStamp;
	}

	public OrderPlacedTimeStamp getOrderPlacedTimeStamp() {
		return orderPlacedTimeStamp;
	}

	public void setRequestedDeliveryTimeStamp(RequestedDeliveryTimeStamp requestedDeliveryTimeStamp) {
		this.requestedDeliveryTimeStamp = requestedDeliveryTimeStamp;
	}

	public RequestedDeliveryTimeStamp getRequestedDeliveryTimeStamp() {
		return requestedDeliveryTimeStamp;
	}

	public void setActualDeliveryTimeStamp(ActualDeliveryTimeStamp actualDeliveryTimeStamp) {
		this.actualDeliveryTimeStamp = actualDeliveryTimeStamp;
	}

	public ActualDeliveryTimeStamp getActualDeliveryTimeStamp() {
		return actualDeliveryTimeStamp;
	}

	public void setTotalTransactionDuration(TotalTransactionDuration totalTransactionDuration) {
		this.totalTransactionDuration = totalTransactionDuration;
	}

	public TotalTransactionDuration getTotalTransactionDuration() {
		return totalTransactionDuration;
	}

	public void setTransactionStatus(TransactionStatus transactionStatus) {
		this.transactionStatus = transactionStatus;
	}

	public TransactionStatus getTransactionStatus() {
		return transactionStatus;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (transactionStatus != null) {
			codeLength += transactionStatus.encode(reverseOS, true);
		}
		
		if (totalTransactionDuration != null) {
			codeLength += totalTransactionDuration.encode(reverseOS, true);
		}
		
		if (actualDeliveryTimeStamp != null) {
			codeLength += actualDeliveryTimeStamp.encode(reverseOS, true);
		}
		
		if (requestedDeliveryTimeStamp != null) {
			codeLength += requestedDeliveryTimeStamp.encode(reverseOS, true);
		}
		
		if (orderPlacedTimeStamp != null) {
			codeLength += orderPlacedTimeStamp.encode(reverseOS, true);
		}
		
		if (rapFileSequenceNumber != null) {
			codeLength += rapFileSequenceNumber.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(RapFileSequenceNumber.tag)) {
			rapFileSequenceNumber = new RapFileSequenceNumber();
			subCodeLength += rapFileSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(OrderPlacedTimeStamp.tag)) {
			orderPlacedTimeStamp = new OrderPlacedTimeStamp();
			subCodeLength += orderPlacedTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RequestedDeliveryTimeStamp.tag)) {
			requestedDeliveryTimeStamp = new RequestedDeliveryTimeStamp();
			subCodeLength += requestedDeliveryTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ActualDeliveryTimeStamp.tag)) {
			actualDeliveryTimeStamp = new ActualDeliveryTimeStamp();
			subCodeLength += actualDeliveryTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalTransactionDuration.tag)) {
			totalTransactionDuration = new TotalTransactionDuration();
			subCodeLength += totalTransactionDuration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TransactionStatus.tag)) {
			transactionStatus = new TransactionStatus();
			subCodeLength += transactionStatus.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (rapFileSequenceNumber != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rapFileSequenceNumber: ").append(rapFileSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (orderPlacedTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("orderPlacedTimeStamp: ");
			orderPlacedTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (requestedDeliveryTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("requestedDeliveryTimeStamp: ");
			requestedDeliveryTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (actualDeliveryTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("actualDeliveryTimeStamp: ");
			actualDeliveryTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (totalTransactionDuration != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalTransactionDuration: ").append(totalTransactionDuration);
			firstSelectedElement = false;
		}
		
		if (transactionStatus != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionStatus: ").append(transactionStatus);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

