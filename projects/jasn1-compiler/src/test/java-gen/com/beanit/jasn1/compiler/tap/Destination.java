/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class Destination implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 89);

	public byte[] code = null;
	private CalledNumber calledNumber = null;
	private DialledDigits dialledDigits = null;
	private CalledPlace calledPlace = null;
	private CalledRegion calledRegion = null;
	private SMSDestinationNumber sMSDestinationNumber = null;
	
	public Destination() {
	}

	public Destination(byte[] code) {
		this.code = code;
	}

	public void setCalledNumber(CalledNumber calledNumber) {
		this.calledNumber = calledNumber;
	}

	public CalledNumber getCalledNumber() {
		return calledNumber;
	}

	public void setDialledDigits(DialledDigits dialledDigits) {
		this.dialledDigits = dialledDigits;
	}

	public DialledDigits getDialledDigits() {
		return dialledDigits;
	}

	public void setCalledPlace(CalledPlace calledPlace) {
		this.calledPlace = calledPlace;
	}

	public CalledPlace getCalledPlace() {
		return calledPlace;
	}

	public void setCalledRegion(CalledRegion calledRegion) {
		this.calledRegion = calledRegion;
	}

	public CalledRegion getCalledRegion() {
		return calledRegion;
	}

	public void setSMSDestinationNumber(SMSDestinationNumber sMSDestinationNumber) {
		this.sMSDestinationNumber = sMSDestinationNumber;
	}

	public SMSDestinationNumber getSMSDestinationNumber() {
		return sMSDestinationNumber;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (sMSDestinationNumber != null) {
			codeLength += sMSDestinationNumber.encode(reverseOS, true);
		}
		
		if (calledRegion != null) {
			codeLength += calledRegion.encode(reverseOS, true);
		}
		
		if (calledPlace != null) {
			codeLength += calledPlace.encode(reverseOS, true);
		}
		
		if (dialledDigits != null) {
			codeLength += dialledDigits.encode(reverseOS, true);
		}
		
		if (calledNumber != null) {
			codeLength += calledNumber.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(CalledNumber.tag)) {
			calledNumber = new CalledNumber();
			subCodeLength += calledNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(DialledDigits.tag)) {
			dialledDigits = new DialledDigits();
			subCodeLength += dialledDigits.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CalledPlace.tag)) {
			calledPlace = new CalledPlace();
			subCodeLength += calledPlace.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CalledRegion.tag)) {
			calledRegion = new CalledRegion();
			subCodeLength += calledRegion.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(SMSDestinationNumber.tag)) {
			sMSDestinationNumber = new SMSDestinationNumber();
			subCodeLength += sMSDestinationNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (calledNumber != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("calledNumber: ").append(calledNumber);
			firstSelectedElement = false;
		}
		
		if (dialledDigits != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dialledDigits: ").append(dialledDigits);
			firstSelectedElement = false;
		}
		
		if (calledPlace != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("calledPlace: ").append(calledPlace);
			firstSelectedElement = false;
		}
		
		if (calledRegion != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("calledRegion: ").append(calledRegion);
			firstSelectedElement = false;
		}
		
		if (sMSDestinationNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sMSDestinationNumber: ").append(sMSDestinationNumber);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

