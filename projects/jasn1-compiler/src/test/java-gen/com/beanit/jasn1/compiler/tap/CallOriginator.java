/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class CallOriginator implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 41);

	public byte[] code = null;
	private CallingNumber callingNumber = null;
	private ClirIndicator clirIndicator = null;
	private SMSOriginator sMSOriginator = null;
	
	public CallOriginator() {
	}

	public CallOriginator(byte[] code) {
		this.code = code;
	}

	public void setCallingNumber(CallingNumber callingNumber) {
		this.callingNumber = callingNumber;
	}

	public CallingNumber getCallingNumber() {
		return callingNumber;
	}

	public void setClirIndicator(ClirIndicator clirIndicator) {
		this.clirIndicator = clirIndicator;
	}

	public ClirIndicator getClirIndicator() {
		return clirIndicator;
	}

	public void setSMSOriginator(SMSOriginator sMSOriginator) {
		this.sMSOriginator = sMSOriginator;
	}

	public SMSOriginator getSMSOriginator() {
		return sMSOriginator;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (sMSOriginator != null) {
			codeLength += sMSOriginator.encode(reverseOS, true);
		}
		
		if (clirIndicator != null) {
			codeLength += clirIndicator.encode(reverseOS, true);
		}
		
		if (callingNumber != null) {
			codeLength += callingNumber.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(CallingNumber.tag)) {
			callingNumber = new CallingNumber();
			subCodeLength += callingNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ClirIndicator.tag)) {
			clirIndicator = new ClirIndicator();
			subCodeLength += clirIndicator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(SMSOriginator.tag)) {
			sMSOriginator = new SMSOriginator();
			subCodeLength += sMSOriginator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (callingNumber != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callingNumber: ").append(callingNumber);
			firstSelectedElement = false;
		}
		
		if (clirIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("clirIndicator: ").append(clirIndicator);
			firstSelectedElement = false;
		}
		
		if (sMSOriginator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sMSOriginator: ").append(sMSOriginator);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

