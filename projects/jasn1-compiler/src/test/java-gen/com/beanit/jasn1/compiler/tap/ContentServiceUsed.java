/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class ContentServiceUsed implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 352);

	public byte[] code = null;
	private ContentTransactionCode contentTransactionCode = null;
	private ContentTransactionType contentTransactionType = null;
	private ObjectType objectType = null;
	private TransactionDescriptionSupp transactionDescriptionSupp = null;
	private TransactionShortDescription transactionShortDescription = null;
	private TransactionDetailDescription transactionDetailDescription = null;
	private TransactionIdentifier transactionIdentifier = null;
	private TransactionAuthCode transactionAuthCode = null;
	private DataVolumeIncoming dataVolumeIncoming = null;
	private DataVolumeOutgoing dataVolumeOutgoing = null;
	private TotalDataVolume totalDataVolume = null;
	private ChargeRefundIndicator chargeRefundIndicator = null;
	private ContentChargingPoint contentChargingPoint = null;
	private ChargeInformationList chargeInformationList = null;
	private AdvisedChargeInformation advisedChargeInformation = null;
	
	public ContentServiceUsed() {
	}

	public ContentServiceUsed(byte[] code) {
		this.code = code;
	}

	public void setContentTransactionCode(ContentTransactionCode contentTransactionCode) {
		this.contentTransactionCode = contentTransactionCode;
	}

	public ContentTransactionCode getContentTransactionCode() {
		return contentTransactionCode;
	}

	public void setContentTransactionType(ContentTransactionType contentTransactionType) {
		this.contentTransactionType = contentTransactionType;
	}

	public ContentTransactionType getContentTransactionType() {
		return contentTransactionType;
	}

	public void setObjectType(ObjectType objectType) {
		this.objectType = objectType;
	}

	public ObjectType getObjectType() {
		return objectType;
	}

	public void setTransactionDescriptionSupp(TransactionDescriptionSupp transactionDescriptionSupp) {
		this.transactionDescriptionSupp = transactionDescriptionSupp;
	}

	public TransactionDescriptionSupp getTransactionDescriptionSupp() {
		return transactionDescriptionSupp;
	}

	public void setTransactionShortDescription(TransactionShortDescription transactionShortDescription) {
		this.transactionShortDescription = transactionShortDescription;
	}

	public TransactionShortDescription getTransactionShortDescription() {
		return transactionShortDescription;
	}

	public void setTransactionDetailDescription(TransactionDetailDescription transactionDetailDescription) {
		this.transactionDetailDescription = transactionDetailDescription;
	}

	public TransactionDetailDescription getTransactionDetailDescription() {
		return transactionDetailDescription;
	}

	public void setTransactionIdentifier(TransactionIdentifier transactionIdentifier) {
		this.transactionIdentifier = transactionIdentifier;
	}

	public TransactionIdentifier getTransactionIdentifier() {
		return transactionIdentifier;
	}

	public void setTransactionAuthCode(TransactionAuthCode transactionAuthCode) {
		this.transactionAuthCode = transactionAuthCode;
	}

	public TransactionAuthCode getTransactionAuthCode() {
		return transactionAuthCode;
	}

	public void setDataVolumeIncoming(DataVolumeIncoming dataVolumeIncoming) {
		this.dataVolumeIncoming = dataVolumeIncoming;
	}

	public DataVolumeIncoming getDataVolumeIncoming() {
		return dataVolumeIncoming;
	}

	public void setDataVolumeOutgoing(DataVolumeOutgoing dataVolumeOutgoing) {
		this.dataVolumeOutgoing = dataVolumeOutgoing;
	}

	public DataVolumeOutgoing getDataVolumeOutgoing() {
		return dataVolumeOutgoing;
	}

	public void setTotalDataVolume(TotalDataVolume totalDataVolume) {
		this.totalDataVolume = totalDataVolume;
	}

	public TotalDataVolume getTotalDataVolume() {
		return totalDataVolume;
	}

	public void setChargeRefundIndicator(ChargeRefundIndicator chargeRefundIndicator) {
		this.chargeRefundIndicator = chargeRefundIndicator;
	}

	public ChargeRefundIndicator getChargeRefundIndicator() {
		return chargeRefundIndicator;
	}

	public void setContentChargingPoint(ContentChargingPoint contentChargingPoint) {
		this.contentChargingPoint = contentChargingPoint;
	}

	public ContentChargingPoint getContentChargingPoint() {
		return contentChargingPoint;
	}

	public void setChargeInformationList(ChargeInformationList chargeInformationList) {
		this.chargeInformationList = chargeInformationList;
	}

	public ChargeInformationList getChargeInformationList() {
		return chargeInformationList;
	}

	public void setAdvisedChargeInformation(AdvisedChargeInformation advisedChargeInformation) {
		this.advisedChargeInformation = advisedChargeInformation;
	}

	public AdvisedChargeInformation getAdvisedChargeInformation() {
		return advisedChargeInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (advisedChargeInformation != null) {
			codeLength += advisedChargeInformation.encode(reverseOS, true);
		}
		
		if (chargeInformationList != null) {
			codeLength += chargeInformationList.encode(reverseOS, true);
		}
		
		if (contentChargingPoint != null) {
			codeLength += contentChargingPoint.encode(reverseOS, true);
		}
		
		if (chargeRefundIndicator != null) {
			codeLength += chargeRefundIndicator.encode(reverseOS, true);
		}
		
		if (totalDataVolume != null) {
			codeLength += totalDataVolume.encode(reverseOS, true);
		}
		
		if (dataVolumeOutgoing != null) {
			codeLength += dataVolumeOutgoing.encode(reverseOS, true);
		}
		
		if (dataVolumeIncoming != null) {
			codeLength += dataVolumeIncoming.encode(reverseOS, true);
		}
		
		if (transactionAuthCode != null) {
			codeLength += transactionAuthCode.encode(reverseOS, true);
		}
		
		if (transactionIdentifier != null) {
			codeLength += transactionIdentifier.encode(reverseOS, true);
		}
		
		if (transactionDetailDescription != null) {
			codeLength += transactionDetailDescription.encode(reverseOS, true);
		}
		
		if (transactionShortDescription != null) {
			codeLength += transactionShortDescription.encode(reverseOS, true);
		}
		
		if (transactionDescriptionSupp != null) {
			codeLength += transactionDescriptionSupp.encode(reverseOS, true);
		}
		
		if (objectType != null) {
			codeLength += objectType.encode(reverseOS, true);
		}
		
		if (contentTransactionType != null) {
			codeLength += contentTransactionType.encode(reverseOS, true);
		}
		
		if (contentTransactionCode != null) {
			codeLength += contentTransactionCode.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(ContentTransactionCode.tag)) {
			contentTransactionCode = new ContentTransactionCode();
			subCodeLength += contentTransactionCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ContentTransactionType.tag)) {
			contentTransactionType = new ContentTransactionType();
			subCodeLength += contentTransactionType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ObjectType.tag)) {
			objectType = new ObjectType();
			subCodeLength += objectType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TransactionDescriptionSupp.tag)) {
			transactionDescriptionSupp = new TransactionDescriptionSupp();
			subCodeLength += transactionDescriptionSupp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TransactionShortDescription.tag)) {
			transactionShortDescription = new TransactionShortDescription();
			subCodeLength += transactionShortDescription.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TransactionDetailDescription.tag)) {
			transactionDetailDescription = new TransactionDetailDescription();
			subCodeLength += transactionDetailDescription.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TransactionIdentifier.tag)) {
			transactionIdentifier = new TransactionIdentifier();
			subCodeLength += transactionIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TransactionAuthCode.tag)) {
			transactionAuthCode = new TransactionAuthCode();
			subCodeLength += transactionAuthCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(DataVolumeIncoming.tag)) {
			dataVolumeIncoming = new DataVolumeIncoming();
			subCodeLength += dataVolumeIncoming.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(DataVolumeOutgoing.tag)) {
			dataVolumeOutgoing = new DataVolumeOutgoing();
			subCodeLength += dataVolumeOutgoing.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalDataVolume.tag)) {
			totalDataVolume = new TotalDataVolume();
			subCodeLength += totalDataVolume.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ChargeRefundIndicator.tag)) {
			chargeRefundIndicator = new ChargeRefundIndicator();
			subCodeLength += chargeRefundIndicator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ContentChargingPoint.tag)) {
			contentChargingPoint = new ContentChargingPoint();
			subCodeLength += contentChargingPoint.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ChargeInformationList.tag)) {
			chargeInformationList = new ChargeInformationList();
			subCodeLength += chargeInformationList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(AdvisedChargeInformation.tag)) {
			advisedChargeInformation = new AdvisedChargeInformation();
			subCodeLength += advisedChargeInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (contentTransactionCode != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("contentTransactionCode: ").append(contentTransactionCode);
			firstSelectedElement = false;
		}
		
		if (contentTransactionType != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("contentTransactionType: ").append(contentTransactionType);
			firstSelectedElement = false;
		}
		
		if (objectType != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("objectType: ").append(objectType);
			firstSelectedElement = false;
		}
		
		if (transactionDescriptionSupp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionDescriptionSupp: ").append(transactionDescriptionSupp);
			firstSelectedElement = false;
		}
		
		if (transactionShortDescription != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionShortDescription: ").append(transactionShortDescription);
			firstSelectedElement = false;
		}
		
		if (transactionDetailDescription != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionDetailDescription: ").append(transactionDetailDescription);
			firstSelectedElement = false;
		}
		
		if (transactionIdentifier != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionIdentifier: ").append(transactionIdentifier);
			firstSelectedElement = false;
		}
		
		if (transactionAuthCode != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionAuthCode: ").append(transactionAuthCode);
			firstSelectedElement = false;
		}
		
		if (dataVolumeIncoming != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeIncoming: ").append(dataVolumeIncoming);
			firstSelectedElement = false;
		}
		
		if (dataVolumeOutgoing != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeOutgoing: ").append(dataVolumeOutgoing);
			firstSelectedElement = false;
		}
		
		if (totalDataVolume != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalDataVolume: ").append(totalDataVolume);
			firstSelectedElement = false;
		}
		
		if (chargeRefundIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargeRefundIndicator: ").append(chargeRefundIndicator);
			firstSelectedElement = false;
		}
		
		if (contentChargingPoint != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("contentChargingPoint: ").append(contentChargingPoint);
			firstSelectedElement = false;
		}
		
		if (chargeInformationList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargeInformationList: ");
			chargeInformationList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (advisedChargeInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("advisedChargeInformation: ");
			advisedChargeInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

