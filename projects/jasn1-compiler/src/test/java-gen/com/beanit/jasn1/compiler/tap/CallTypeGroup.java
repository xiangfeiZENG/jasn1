/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class CallTypeGroup implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 258);

	public byte[] code = null;
	private CallTypeLevel1 callTypeLevel1 = null;
	private CallTypeLevel2 callTypeLevel2 = null;
	private CallTypeLevel3 callTypeLevel3 = null;
	
	public CallTypeGroup() {
	}

	public CallTypeGroup(byte[] code) {
		this.code = code;
	}

	public void setCallTypeLevel1(CallTypeLevel1 callTypeLevel1) {
		this.callTypeLevel1 = callTypeLevel1;
	}

	public CallTypeLevel1 getCallTypeLevel1() {
		return callTypeLevel1;
	}

	public void setCallTypeLevel2(CallTypeLevel2 callTypeLevel2) {
		this.callTypeLevel2 = callTypeLevel2;
	}

	public CallTypeLevel2 getCallTypeLevel2() {
		return callTypeLevel2;
	}

	public void setCallTypeLevel3(CallTypeLevel3 callTypeLevel3) {
		this.callTypeLevel3 = callTypeLevel3;
	}

	public CallTypeLevel3 getCallTypeLevel3() {
		return callTypeLevel3;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (callTypeLevel3 != null) {
			codeLength += callTypeLevel3.encode(reverseOS, true);
		}
		
		if (callTypeLevel2 != null) {
			codeLength += callTypeLevel2.encode(reverseOS, true);
		}
		
		if (callTypeLevel1 != null) {
			codeLength += callTypeLevel1.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(CallTypeLevel1.tag)) {
			callTypeLevel1 = new CallTypeLevel1();
			subCodeLength += callTypeLevel1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallTypeLevel2.tag)) {
			callTypeLevel2 = new CallTypeLevel2();
			subCodeLength += callTypeLevel2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallTypeLevel3.tag)) {
			callTypeLevel3 = new CallTypeLevel3();
			subCodeLength += callTypeLevel3.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (callTypeLevel1 != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callTypeLevel1: ").append(callTypeLevel1);
			firstSelectedElement = false;
		}
		
		if (callTypeLevel2 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callTypeLevel2: ").append(callTypeLevel2);
			firstSelectedElement = false;
		}
		
		if (callTypeLevel3 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callTypeLevel3: ").append(callTypeLevel3);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

