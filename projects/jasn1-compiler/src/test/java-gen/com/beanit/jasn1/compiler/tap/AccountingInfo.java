/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class AccountingInfo implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 5);

	public byte[] code = null;
	private TaxationList taxation = null;
	private DiscountingList discounting = null;
	private LocalCurrency localCurrency = null;
	private TapCurrency tapCurrency = null;
	private CurrencyConversionList currencyConversionInfo = null;
	private TapDecimalPlaces tapDecimalPlaces = null;
	
	public AccountingInfo() {
	}

	public AccountingInfo(byte[] code) {
		this.code = code;
	}

	public void setTaxation(TaxationList taxation) {
		this.taxation = taxation;
	}

	public TaxationList getTaxation() {
		return taxation;
	}

	public void setDiscounting(DiscountingList discounting) {
		this.discounting = discounting;
	}

	public DiscountingList getDiscounting() {
		return discounting;
	}

	public void setLocalCurrency(LocalCurrency localCurrency) {
		this.localCurrency = localCurrency;
	}

	public LocalCurrency getLocalCurrency() {
		return localCurrency;
	}

	public void setTapCurrency(TapCurrency tapCurrency) {
		this.tapCurrency = tapCurrency;
	}

	public TapCurrency getTapCurrency() {
		return tapCurrency;
	}

	public void setCurrencyConversionInfo(CurrencyConversionList currencyConversionInfo) {
		this.currencyConversionInfo = currencyConversionInfo;
	}

	public CurrencyConversionList getCurrencyConversionInfo() {
		return currencyConversionInfo;
	}

	public void setTapDecimalPlaces(TapDecimalPlaces tapDecimalPlaces) {
		this.tapDecimalPlaces = tapDecimalPlaces;
	}

	public TapDecimalPlaces getTapDecimalPlaces() {
		return tapDecimalPlaces;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (tapDecimalPlaces != null) {
			codeLength += tapDecimalPlaces.encode(reverseOS, true);
		}
		
		if (currencyConversionInfo != null) {
			codeLength += currencyConversionInfo.encode(reverseOS, true);
		}
		
		if (tapCurrency != null) {
			codeLength += tapCurrency.encode(reverseOS, true);
		}
		
		if (localCurrency != null) {
			codeLength += localCurrency.encode(reverseOS, true);
		}
		
		if (discounting != null) {
			codeLength += discounting.encode(reverseOS, true);
		}
		
		if (taxation != null) {
			codeLength += taxation.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(TaxationList.tag)) {
			taxation = new TaxationList();
			subCodeLength += taxation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(DiscountingList.tag)) {
			discounting = new DiscountingList();
			subCodeLength += discounting.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(LocalCurrency.tag)) {
			localCurrency = new LocalCurrency();
			subCodeLength += localCurrency.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TapCurrency.tag)) {
			tapCurrency = new TapCurrency();
			subCodeLength += tapCurrency.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CurrencyConversionList.tag)) {
			currencyConversionInfo = new CurrencyConversionList();
			subCodeLength += currencyConversionInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TapDecimalPlaces.tag)) {
			tapDecimalPlaces = new TapDecimalPlaces();
			subCodeLength += tapDecimalPlaces.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (taxation != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("taxation: ");
			taxation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (discounting != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("discounting: ");
			discounting.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (localCurrency != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("localCurrency: ").append(localCurrency);
			firstSelectedElement = false;
		}
		
		if (tapCurrency != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tapCurrency: ").append(tapCurrency);
			firstSelectedElement = false;
		}
		
		if (currencyConversionInfo != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("currencyConversionInfo: ");
			currencyConversionInfo.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (tapDecimalPlaces != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tapDecimalPlaces: ").append(tapDecimalPlaces);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

