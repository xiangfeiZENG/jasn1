/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class ChargedParty implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 436);

	public byte[] code = null;
	private Imsi imsi = null;
	private Msisdn msisdn = null;
	private PublicUserId publicUserId = null;
	private HomeBid homeBid = null;
	private HomeLocationDescription homeLocationDescription = null;
	private Imei imei = null;
	
	public ChargedParty() {
	}

	public ChargedParty(byte[] code) {
		this.code = code;
	}

	public void setImsi(Imsi imsi) {
		this.imsi = imsi;
	}

	public Imsi getImsi() {
		return imsi;
	}

	public void setMsisdn(Msisdn msisdn) {
		this.msisdn = msisdn;
	}

	public Msisdn getMsisdn() {
		return msisdn;
	}

	public void setPublicUserId(PublicUserId publicUserId) {
		this.publicUserId = publicUserId;
	}

	public PublicUserId getPublicUserId() {
		return publicUserId;
	}

	public void setHomeBid(HomeBid homeBid) {
		this.homeBid = homeBid;
	}

	public HomeBid getHomeBid() {
		return homeBid;
	}

	public void setHomeLocationDescription(HomeLocationDescription homeLocationDescription) {
		this.homeLocationDescription = homeLocationDescription;
	}

	public HomeLocationDescription getHomeLocationDescription() {
		return homeLocationDescription;
	}

	public void setImei(Imei imei) {
		this.imei = imei;
	}

	public Imei getImei() {
		return imei;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (imei != null) {
			codeLength += imei.encode(reverseOS, true);
		}
		
		if (homeLocationDescription != null) {
			codeLength += homeLocationDescription.encode(reverseOS, true);
		}
		
		if (homeBid != null) {
			codeLength += homeBid.encode(reverseOS, true);
		}
		
		if (publicUserId != null) {
			codeLength += publicUserId.encode(reverseOS, true);
		}
		
		if (msisdn != null) {
			codeLength += msisdn.encode(reverseOS, true);
		}
		
		if (imsi != null) {
			codeLength += imsi.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(Imsi.tag)) {
			imsi = new Imsi();
			subCodeLength += imsi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(Msisdn.tag)) {
			msisdn = new Msisdn();
			subCodeLength += msisdn.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(PublicUserId.tag)) {
			publicUserId = new PublicUserId();
			subCodeLength += publicUserId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(HomeBid.tag)) {
			homeBid = new HomeBid();
			subCodeLength += homeBid.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(HomeLocationDescription.tag)) {
			homeLocationDescription = new HomeLocationDescription();
			subCodeLength += homeLocationDescription.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(Imei.tag)) {
			imei = new Imei();
			subCodeLength += imei.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (imsi != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("imsi: ").append(imsi);
			firstSelectedElement = false;
		}
		
		if (msisdn != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("msisdn: ").append(msisdn);
			firstSelectedElement = false;
		}
		
		if (publicUserId != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("publicUserId: ").append(publicUserId);
			firstSelectedElement = false;
		}
		
		if (homeBid != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("homeBid: ").append(homeBid);
			firstSelectedElement = false;
		}
		
		if (homeLocationDescription != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("homeLocationDescription: ").append(homeLocationDescription);
			firstSelectedElement = false;
		}
		
		if (imei != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("imei: ").append(imei);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

