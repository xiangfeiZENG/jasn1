/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class LocationService implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 297);

	public byte[] code = null;
	private RapFileSequenceNumber rapFileSequenceNumber = null;
	private RecEntityCode recEntityCode = null;
	private CallReference callReference = null;
	private TrackingCustomerInformation trackingCustomerInformation = null;
	private LCSSPInformation lCSSPInformation = null;
	private TrackedCustomerInformation trackedCustomerInformation = null;
	private LocationServiceUsage locationServiceUsage = null;
	private OperatorSpecInfoList operatorSpecInformation = null;
	
	public LocationService() {
	}

	public LocationService(byte[] code) {
		this.code = code;
	}

	public void setRapFileSequenceNumber(RapFileSequenceNumber rapFileSequenceNumber) {
		this.rapFileSequenceNumber = rapFileSequenceNumber;
	}

	public RapFileSequenceNumber getRapFileSequenceNumber() {
		return rapFileSequenceNumber;
	}

	public void setRecEntityCode(RecEntityCode recEntityCode) {
		this.recEntityCode = recEntityCode;
	}

	public RecEntityCode getRecEntityCode() {
		return recEntityCode;
	}

	public void setCallReference(CallReference callReference) {
		this.callReference = callReference;
	}

	public CallReference getCallReference() {
		return callReference;
	}

	public void setTrackingCustomerInformation(TrackingCustomerInformation trackingCustomerInformation) {
		this.trackingCustomerInformation = trackingCustomerInformation;
	}

	public TrackingCustomerInformation getTrackingCustomerInformation() {
		return trackingCustomerInformation;
	}

	public void setLCSSPInformation(LCSSPInformation lCSSPInformation) {
		this.lCSSPInformation = lCSSPInformation;
	}

	public LCSSPInformation getLCSSPInformation() {
		return lCSSPInformation;
	}

	public void setTrackedCustomerInformation(TrackedCustomerInformation trackedCustomerInformation) {
		this.trackedCustomerInformation = trackedCustomerInformation;
	}

	public TrackedCustomerInformation getTrackedCustomerInformation() {
		return trackedCustomerInformation;
	}

	public void setLocationServiceUsage(LocationServiceUsage locationServiceUsage) {
		this.locationServiceUsage = locationServiceUsage;
	}

	public LocationServiceUsage getLocationServiceUsage() {
		return locationServiceUsage;
	}

	public void setOperatorSpecInformation(OperatorSpecInfoList operatorSpecInformation) {
		this.operatorSpecInformation = operatorSpecInformation;
	}

	public OperatorSpecInfoList getOperatorSpecInformation() {
		return operatorSpecInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (operatorSpecInformation != null) {
			codeLength += operatorSpecInformation.encode(reverseOS, true);
		}
		
		if (locationServiceUsage != null) {
			codeLength += locationServiceUsage.encode(reverseOS, true);
		}
		
		if (trackedCustomerInformation != null) {
			codeLength += trackedCustomerInformation.encode(reverseOS, true);
		}
		
		if (lCSSPInformation != null) {
			codeLength += lCSSPInformation.encode(reverseOS, true);
		}
		
		if (trackingCustomerInformation != null) {
			codeLength += trackingCustomerInformation.encode(reverseOS, true);
		}
		
		if (callReference != null) {
			codeLength += callReference.encode(reverseOS, true);
		}
		
		if (recEntityCode != null) {
			codeLength += recEntityCode.encode(reverseOS, true);
		}
		
		if (rapFileSequenceNumber != null) {
			codeLength += rapFileSequenceNumber.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(RapFileSequenceNumber.tag)) {
			rapFileSequenceNumber = new RapFileSequenceNumber();
			subCodeLength += rapFileSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RecEntityCode.tag)) {
			recEntityCode = new RecEntityCode();
			subCodeLength += recEntityCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallReference.tag)) {
			callReference = new CallReference();
			subCodeLength += callReference.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TrackingCustomerInformation.tag)) {
			trackingCustomerInformation = new TrackingCustomerInformation();
			subCodeLength += trackingCustomerInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(LCSSPInformation.tag)) {
			lCSSPInformation = new LCSSPInformation();
			subCodeLength += lCSSPInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TrackedCustomerInformation.tag)) {
			trackedCustomerInformation = new TrackedCustomerInformation();
			subCodeLength += trackedCustomerInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(LocationServiceUsage.tag)) {
			locationServiceUsage = new LocationServiceUsage();
			subCodeLength += locationServiceUsage.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(OperatorSpecInfoList.tag)) {
			operatorSpecInformation = new OperatorSpecInfoList();
			subCodeLength += operatorSpecInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (rapFileSequenceNumber != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rapFileSequenceNumber: ").append(rapFileSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (recEntityCode != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recEntityCode: ").append(recEntityCode);
			firstSelectedElement = false;
		}
		
		if (callReference != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callReference: ").append(callReference);
			firstSelectedElement = false;
		}
		
		if (trackingCustomerInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trackingCustomerInformation: ");
			trackingCustomerInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (lCSSPInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lCSSPInformation: ");
			lCSSPInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (trackedCustomerInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trackedCustomerInformation: ");
			trackedCustomerInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (locationServiceUsage != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("locationServiceUsage: ");
			locationServiceUsage.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (operatorSpecInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("operatorSpecInformation: ");
			operatorSpecInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

