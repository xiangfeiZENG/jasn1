/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class GprsBasicCallInformation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 114);

	public byte[] code = null;
	private GprsChargeableSubscriber gprsChargeableSubscriber = null;
	private RapFileSequenceNumber rapFileSequenceNumber = null;
	private GprsDestination gprsDestination = null;
	private CallEventStartTimeStamp callEventStartTimeStamp = null;
	private TotalCallEventDuration totalCallEventDuration = null;
	private CauseForTerm causeForTerm = null;
	private PartialTypeIndicator partialTypeIndicator = null;
	private PDPContextStartTimestamp pDPContextStartTimestamp = null;
	private NetworkInitPDPContext networkInitPDPContext = null;
	private ChargingId chargingId = null;
	
	public GprsBasicCallInformation() {
	}

	public GprsBasicCallInformation(byte[] code) {
		this.code = code;
	}

	public void setGprsChargeableSubscriber(GprsChargeableSubscriber gprsChargeableSubscriber) {
		this.gprsChargeableSubscriber = gprsChargeableSubscriber;
	}

	public GprsChargeableSubscriber getGprsChargeableSubscriber() {
		return gprsChargeableSubscriber;
	}

	public void setRapFileSequenceNumber(RapFileSequenceNumber rapFileSequenceNumber) {
		this.rapFileSequenceNumber = rapFileSequenceNumber;
	}

	public RapFileSequenceNumber getRapFileSequenceNumber() {
		return rapFileSequenceNumber;
	}

	public void setGprsDestination(GprsDestination gprsDestination) {
		this.gprsDestination = gprsDestination;
	}

	public GprsDestination getGprsDestination() {
		return gprsDestination;
	}

	public void setCallEventStartTimeStamp(CallEventStartTimeStamp callEventStartTimeStamp) {
		this.callEventStartTimeStamp = callEventStartTimeStamp;
	}

	public CallEventStartTimeStamp getCallEventStartTimeStamp() {
		return callEventStartTimeStamp;
	}

	public void setTotalCallEventDuration(TotalCallEventDuration totalCallEventDuration) {
		this.totalCallEventDuration = totalCallEventDuration;
	}

	public TotalCallEventDuration getTotalCallEventDuration() {
		return totalCallEventDuration;
	}

	public void setCauseForTerm(CauseForTerm causeForTerm) {
		this.causeForTerm = causeForTerm;
	}

	public CauseForTerm getCauseForTerm() {
		return causeForTerm;
	}

	public void setPartialTypeIndicator(PartialTypeIndicator partialTypeIndicator) {
		this.partialTypeIndicator = partialTypeIndicator;
	}

	public PartialTypeIndicator getPartialTypeIndicator() {
		return partialTypeIndicator;
	}

	public void setPDPContextStartTimestamp(PDPContextStartTimestamp pDPContextStartTimestamp) {
		this.pDPContextStartTimestamp = pDPContextStartTimestamp;
	}

	public PDPContextStartTimestamp getPDPContextStartTimestamp() {
		return pDPContextStartTimestamp;
	}

	public void setNetworkInitPDPContext(NetworkInitPDPContext networkInitPDPContext) {
		this.networkInitPDPContext = networkInitPDPContext;
	}

	public NetworkInitPDPContext getNetworkInitPDPContext() {
		return networkInitPDPContext;
	}

	public void setChargingId(ChargingId chargingId) {
		this.chargingId = chargingId;
	}

	public ChargingId getChargingId() {
		return chargingId;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (chargingId != null) {
			codeLength += chargingId.encode(reverseOS, true);
		}
		
		if (networkInitPDPContext != null) {
			codeLength += networkInitPDPContext.encode(reverseOS, true);
		}
		
		if (pDPContextStartTimestamp != null) {
			codeLength += pDPContextStartTimestamp.encode(reverseOS, true);
		}
		
		if (partialTypeIndicator != null) {
			codeLength += partialTypeIndicator.encode(reverseOS, true);
		}
		
		if (causeForTerm != null) {
			codeLength += causeForTerm.encode(reverseOS, true);
		}
		
		if (totalCallEventDuration != null) {
			codeLength += totalCallEventDuration.encode(reverseOS, true);
		}
		
		if (callEventStartTimeStamp != null) {
			codeLength += callEventStartTimeStamp.encode(reverseOS, true);
		}
		
		if (gprsDestination != null) {
			codeLength += gprsDestination.encode(reverseOS, true);
		}
		
		if (rapFileSequenceNumber != null) {
			codeLength += rapFileSequenceNumber.encode(reverseOS, true);
		}
		
		if (gprsChargeableSubscriber != null) {
			codeLength += gprsChargeableSubscriber.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(GprsChargeableSubscriber.tag)) {
			gprsChargeableSubscriber = new GprsChargeableSubscriber();
			subCodeLength += gprsChargeableSubscriber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RapFileSequenceNumber.tag)) {
			rapFileSequenceNumber = new RapFileSequenceNumber();
			subCodeLength += rapFileSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(GprsDestination.tag)) {
			gprsDestination = new GprsDestination();
			subCodeLength += gprsDestination.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallEventStartTimeStamp.tag)) {
			callEventStartTimeStamp = new CallEventStartTimeStamp();
			subCodeLength += callEventStartTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalCallEventDuration.tag)) {
			totalCallEventDuration = new TotalCallEventDuration();
			subCodeLength += totalCallEventDuration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CauseForTerm.tag)) {
			causeForTerm = new CauseForTerm();
			subCodeLength += causeForTerm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(PartialTypeIndicator.tag)) {
			partialTypeIndicator = new PartialTypeIndicator();
			subCodeLength += partialTypeIndicator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(PDPContextStartTimestamp.tag)) {
			pDPContextStartTimestamp = new PDPContextStartTimestamp();
			subCodeLength += pDPContextStartTimestamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(NetworkInitPDPContext.tag)) {
			networkInitPDPContext = new NetworkInitPDPContext();
			subCodeLength += networkInitPDPContext.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ChargingId.tag)) {
			chargingId = new ChargingId();
			subCodeLength += chargingId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (gprsChargeableSubscriber != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("gprsChargeableSubscriber: ");
			gprsChargeableSubscriber.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (rapFileSequenceNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rapFileSequenceNumber: ").append(rapFileSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (gprsDestination != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("gprsDestination: ");
			gprsDestination.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (callEventStartTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callEventStartTimeStamp: ");
			callEventStartTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (totalCallEventDuration != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalCallEventDuration: ").append(totalCallEventDuration);
			firstSelectedElement = false;
		}
		
		if (causeForTerm != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("causeForTerm: ").append(causeForTerm);
			firstSelectedElement = false;
		}
		
		if (partialTypeIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("partialTypeIndicator: ").append(partialTypeIndicator);
			firstSelectedElement = false;
		}
		
		if (pDPContextStartTimestamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pDPContextStartTimestamp: ");
			pDPContextStartTimestamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (networkInitPDPContext != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("networkInitPDPContext: ").append(networkInitPDPContext);
			firstSelectedElement = false;
		}
		
		if (chargingId != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingId: ").append(chargingId);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

