/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class MobileSession implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 434);

	public byte[] code = null;
	private MobileSessionService mobileSessionService = null;
	private ChargedParty chargedParty = null;
	private RapFileSequenceNumber rapFileSequenceNumber = null;
	private SimToolkitIndicator simToolkitIndicator = null;
	private GeographicalLocation geographicalLocation = null;
	private LocationArea locationArea = null;
	private CellId cellId = null;
	private EventReference eventReference = null;
	private RecEntityCodeList recEntityCodeList = null;
	private ServiceStartTimestamp serviceStartTimestamp = null;
	private CauseForTerm causeForTerm = null;
	private TotalCallEventDuration totalCallEventDuration = null;
	private NonChargedParty nonChargedParty = null;
	private RequestedDestination requestedDestination = null;
	private SessionChargeInfoList sessionChargeInfoList = null;
	private OperatorSpecInfoList operatorSpecInformation = null;
	
	public MobileSession() {
	}

	public MobileSession(byte[] code) {
		this.code = code;
	}

	public void setMobileSessionService(MobileSessionService mobileSessionService) {
		this.mobileSessionService = mobileSessionService;
	}

	public MobileSessionService getMobileSessionService() {
		return mobileSessionService;
	}

	public void setChargedParty(ChargedParty chargedParty) {
		this.chargedParty = chargedParty;
	}

	public ChargedParty getChargedParty() {
		return chargedParty;
	}

	public void setRapFileSequenceNumber(RapFileSequenceNumber rapFileSequenceNumber) {
		this.rapFileSequenceNumber = rapFileSequenceNumber;
	}

	public RapFileSequenceNumber getRapFileSequenceNumber() {
		return rapFileSequenceNumber;
	}

	public void setSimToolkitIndicator(SimToolkitIndicator simToolkitIndicator) {
		this.simToolkitIndicator = simToolkitIndicator;
	}

	public SimToolkitIndicator getSimToolkitIndicator() {
		return simToolkitIndicator;
	}

	public void setGeographicalLocation(GeographicalLocation geographicalLocation) {
		this.geographicalLocation = geographicalLocation;
	}

	public GeographicalLocation getGeographicalLocation() {
		return geographicalLocation;
	}

	public void setLocationArea(LocationArea locationArea) {
		this.locationArea = locationArea;
	}

	public LocationArea getLocationArea() {
		return locationArea;
	}

	public void setCellId(CellId cellId) {
		this.cellId = cellId;
	}

	public CellId getCellId() {
		return cellId;
	}

	public void setEventReference(EventReference eventReference) {
		this.eventReference = eventReference;
	}

	public EventReference getEventReference() {
		return eventReference;
	}

	public void setRecEntityCodeList(RecEntityCodeList recEntityCodeList) {
		this.recEntityCodeList = recEntityCodeList;
	}

	public RecEntityCodeList getRecEntityCodeList() {
		return recEntityCodeList;
	}

	public void setServiceStartTimestamp(ServiceStartTimestamp serviceStartTimestamp) {
		this.serviceStartTimestamp = serviceStartTimestamp;
	}

	public ServiceStartTimestamp getServiceStartTimestamp() {
		return serviceStartTimestamp;
	}

	public void setCauseForTerm(CauseForTerm causeForTerm) {
		this.causeForTerm = causeForTerm;
	}

	public CauseForTerm getCauseForTerm() {
		return causeForTerm;
	}

	public void setTotalCallEventDuration(TotalCallEventDuration totalCallEventDuration) {
		this.totalCallEventDuration = totalCallEventDuration;
	}

	public TotalCallEventDuration getTotalCallEventDuration() {
		return totalCallEventDuration;
	}

	public void setNonChargedParty(NonChargedParty nonChargedParty) {
		this.nonChargedParty = nonChargedParty;
	}

	public NonChargedParty getNonChargedParty() {
		return nonChargedParty;
	}

	public void setRequestedDestination(RequestedDestination requestedDestination) {
		this.requestedDestination = requestedDestination;
	}

	public RequestedDestination getRequestedDestination() {
		return requestedDestination;
	}

	public void setSessionChargeInfoList(SessionChargeInfoList sessionChargeInfoList) {
		this.sessionChargeInfoList = sessionChargeInfoList;
	}

	public SessionChargeInfoList getSessionChargeInfoList() {
		return sessionChargeInfoList;
	}

	public void setOperatorSpecInformation(OperatorSpecInfoList operatorSpecInformation) {
		this.operatorSpecInformation = operatorSpecInformation;
	}

	public OperatorSpecInfoList getOperatorSpecInformation() {
		return operatorSpecInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (operatorSpecInformation != null) {
			codeLength += operatorSpecInformation.encode(reverseOS, true);
		}
		
		if (sessionChargeInfoList != null) {
			codeLength += sessionChargeInfoList.encode(reverseOS, true);
		}
		
		if (requestedDestination != null) {
			codeLength += requestedDestination.encode(reverseOS, true);
		}
		
		if (nonChargedParty != null) {
			codeLength += nonChargedParty.encode(reverseOS, true);
		}
		
		if (totalCallEventDuration != null) {
			codeLength += totalCallEventDuration.encode(reverseOS, true);
		}
		
		if (causeForTerm != null) {
			codeLength += causeForTerm.encode(reverseOS, true);
		}
		
		if (serviceStartTimestamp != null) {
			codeLength += serviceStartTimestamp.encode(reverseOS, true);
		}
		
		if (recEntityCodeList != null) {
			codeLength += recEntityCodeList.encode(reverseOS, true);
		}
		
		if (eventReference != null) {
			codeLength += eventReference.encode(reverseOS, true);
		}
		
		if (cellId != null) {
			codeLength += cellId.encode(reverseOS, true);
		}
		
		if (locationArea != null) {
			codeLength += locationArea.encode(reverseOS, true);
		}
		
		if (geographicalLocation != null) {
			codeLength += geographicalLocation.encode(reverseOS, true);
		}
		
		if (simToolkitIndicator != null) {
			codeLength += simToolkitIndicator.encode(reverseOS, true);
		}
		
		if (rapFileSequenceNumber != null) {
			codeLength += rapFileSequenceNumber.encode(reverseOS, true);
		}
		
		if (chargedParty != null) {
			codeLength += chargedParty.encode(reverseOS, true);
		}
		
		if (mobileSessionService != null) {
			codeLength += mobileSessionService.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(MobileSessionService.tag)) {
			mobileSessionService = new MobileSessionService();
			subCodeLength += mobileSessionService.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ChargedParty.tag)) {
			chargedParty = new ChargedParty();
			subCodeLength += chargedParty.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RapFileSequenceNumber.tag)) {
			rapFileSequenceNumber = new RapFileSequenceNumber();
			subCodeLength += rapFileSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(SimToolkitIndicator.tag)) {
			simToolkitIndicator = new SimToolkitIndicator();
			subCodeLength += simToolkitIndicator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(GeographicalLocation.tag)) {
			geographicalLocation = new GeographicalLocation();
			subCodeLength += geographicalLocation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(LocationArea.tag)) {
			locationArea = new LocationArea();
			subCodeLength += locationArea.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CellId.tag)) {
			cellId = new CellId();
			subCodeLength += cellId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(EventReference.tag)) {
			eventReference = new EventReference();
			subCodeLength += eventReference.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RecEntityCodeList.tag)) {
			recEntityCodeList = new RecEntityCodeList();
			subCodeLength += recEntityCodeList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ServiceStartTimestamp.tag)) {
			serviceStartTimestamp = new ServiceStartTimestamp();
			subCodeLength += serviceStartTimestamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CauseForTerm.tag)) {
			causeForTerm = new CauseForTerm();
			subCodeLength += causeForTerm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalCallEventDuration.tag)) {
			totalCallEventDuration = new TotalCallEventDuration();
			subCodeLength += totalCallEventDuration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(NonChargedParty.tag)) {
			nonChargedParty = new NonChargedParty();
			subCodeLength += nonChargedParty.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RequestedDestination.tag)) {
			requestedDestination = new RequestedDestination();
			subCodeLength += requestedDestination.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(SessionChargeInfoList.tag)) {
			sessionChargeInfoList = new SessionChargeInfoList();
			subCodeLength += sessionChargeInfoList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(OperatorSpecInfoList.tag)) {
			operatorSpecInformation = new OperatorSpecInfoList();
			subCodeLength += operatorSpecInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (mobileSessionService != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mobileSessionService: ").append(mobileSessionService);
			firstSelectedElement = false;
		}
		
		if (chargedParty != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargedParty: ");
			chargedParty.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (rapFileSequenceNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rapFileSequenceNumber: ").append(rapFileSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (simToolkitIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("simToolkitIndicator: ").append(simToolkitIndicator);
			firstSelectedElement = false;
		}
		
		if (geographicalLocation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("geographicalLocation: ");
			geographicalLocation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (locationArea != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("locationArea: ").append(locationArea);
			firstSelectedElement = false;
		}
		
		if (cellId != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cellId: ").append(cellId);
			firstSelectedElement = false;
		}
		
		if (eventReference != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("eventReference: ").append(eventReference);
			firstSelectedElement = false;
		}
		
		if (recEntityCodeList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recEntityCodeList: ");
			recEntityCodeList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (serviceStartTimestamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceStartTimestamp: ");
			serviceStartTimestamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (causeForTerm != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("causeForTerm: ").append(causeForTerm);
			firstSelectedElement = false;
		}
		
		if (totalCallEventDuration != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalCallEventDuration: ").append(totalCallEventDuration);
			firstSelectedElement = false;
		}
		
		if (nonChargedParty != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonChargedParty: ");
			nonChargedParty.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (requestedDestination != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("requestedDestination: ");
			requestedDestination.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (sessionChargeInfoList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sessionChargeInfoList: ");
			sessionChargeInfoList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (operatorSpecInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("operatorSpecInformation: ");
			operatorSpecInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

