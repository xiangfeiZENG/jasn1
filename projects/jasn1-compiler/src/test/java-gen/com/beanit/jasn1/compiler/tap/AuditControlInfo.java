/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class AuditControlInfo implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 15);

	public byte[] code = null;
	private EarliestCallTimeStamp earliestCallTimeStamp = null;
	private LatestCallTimeStamp latestCallTimeStamp = null;
	private TotalCharge totalCharge = null;
	private TotalChargeRefund totalChargeRefund = null;
	private TotalTaxRefund totalTaxRefund = null;
	private TotalTaxValue totalTaxValue = null;
	private TotalDiscountValue totalDiscountValue = null;
	private TotalDiscountRefund totalDiscountRefund = null;
	private TotalAdvisedChargeValueList totalAdvisedChargeValueList = null;
	private CallEventDetailsCount callEventDetailsCount = null;
	private OperatorSpecInfoList operatorSpecInformation = null;
	
	public AuditControlInfo() {
	}

	public AuditControlInfo(byte[] code) {
		this.code = code;
	}

	public void setEarliestCallTimeStamp(EarliestCallTimeStamp earliestCallTimeStamp) {
		this.earliestCallTimeStamp = earliestCallTimeStamp;
	}

	public EarliestCallTimeStamp getEarliestCallTimeStamp() {
		return earliestCallTimeStamp;
	}

	public void setLatestCallTimeStamp(LatestCallTimeStamp latestCallTimeStamp) {
		this.latestCallTimeStamp = latestCallTimeStamp;
	}

	public LatestCallTimeStamp getLatestCallTimeStamp() {
		return latestCallTimeStamp;
	}

	public void setTotalCharge(TotalCharge totalCharge) {
		this.totalCharge = totalCharge;
	}

	public TotalCharge getTotalCharge() {
		return totalCharge;
	}

	public void setTotalChargeRefund(TotalChargeRefund totalChargeRefund) {
		this.totalChargeRefund = totalChargeRefund;
	}

	public TotalChargeRefund getTotalChargeRefund() {
		return totalChargeRefund;
	}

	public void setTotalTaxRefund(TotalTaxRefund totalTaxRefund) {
		this.totalTaxRefund = totalTaxRefund;
	}

	public TotalTaxRefund getTotalTaxRefund() {
		return totalTaxRefund;
	}

	public void setTotalTaxValue(TotalTaxValue totalTaxValue) {
		this.totalTaxValue = totalTaxValue;
	}

	public TotalTaxValue getTotalTaxValue() {
		return totalTaxValue;
	}

	public void setTotalDiscountValue(TotalDiscountValue totalDiscountValue) {
		this.totalDiscountValue = totalDiscountValue;
	}

	public TotalDiscountValue getTotalDiscountValue() {
		return totalDiscountValue;
	}

	public void setTotalDiscountRefund(TotalDiscountRefund totalDiscountRefund) {
		this.totalDiscountRefund = totalDiscountRefund;
	}

	public TotalDiscountRefund getTotalDiscountRefund() {
		return totalDiscountRefund;
	}

	public void setTotalAdvisedChargeValueList(TotalAdvisedChargeValueList totalAdvisedChargeValueList) {
		this.totalAdvisedChargeValueList = totalAdvisedChargeValueList;
	}

	public TotalAdvisedChargeValueList getTotalAdvisedChargeValueList() {
		return totalAdvisedChargeValueList;
	}

	public void setCallEventDetailsCount(CallEventDetailsCount callEventDetailsCount) {
		this.callEventDetailsCount = callEventDetailsCount;
	}

	public CallEventDetailsCount getCallEventDetailsCount() {
		return callEventDetailsCount;
	}

	public void setOperatorSpecInformation(OperatorSpecInfoList operatorSpecInformation) {
		this.operatorSpecInformation = operatorSpecInformation;
	}

	public OperatorSpecInfoList getOperatorSpecInformation() {
		return operatorSpecInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (operatorSpecInformation != null) {
			codeLength += operatorSpecInformation.encode(reverseOS, true);
		}
		
		if (callEventDetailsCount != null) {
			codeLength += callEventDetailsCount.encode(reverseOS, true);
		}
		
		if (totalAdvisedChargeValueList != null) {
			codeLength += totalAdvisedChargeValueList.encode(reverseOS, true);
		}
		
		if (totalDiscountRefund != null) {
			codeLength += totalDiscountRefund.encode(reverseOS, true);
		}
		
		if (totalDiscountValue != null) {
			codeLength += totalDiscountValue.encode(reverseOS, true);
		}
		
		if (totalTaxValue != null) {
			codeLength += totalTaxValue.encode(reverseOS, true);
		}
		
		if (totalTaxRefund != null) {
			codeLength += totalTaxRefund.encode(reverseOS, true);
		}
		
		if (totalChargeRefund != null) {
			codeLength += totalChargeRefund.encode(reverseOS, true);
		}
		
		if (totalCharge != null) {
			codeLength += totalCharge.encode(reverseOS, true);
		}
		
		if (latestCallTimeStamp != null) {
			codeLength += latestCallTimeStamp.encode(reverseOS, true);
		}
		
		if (earliestCallTimeStamp != null) {
			codeLength += earliestCallTimeStamp.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(EarliestCallTimeStamp.tag)) {
			earliestCallTimeStamp = new EarliestCallTimeStamp();
			subCodeLength += earliestCallTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(LatestCallTimeStamp.tag)) {
			latestCallTimeStamp = new LatestCallTimeStamp();
			subCodeLength += latestCallTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalCharge.tag)) {
			totalCharge = new TotalCharge();
			subCodeLength += totalCharge.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalChargeRefund.tag)) {
			totalChargeRefund = new TotalChargeRefund();
			subCodeLength += totalChargeRefund.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalTaxRefund.tag)) {
			totalTaxRefund = new TotalTaxRefund();
			subCodeLength += totalTaxRefund.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalTaxValue.tag)) {
			totalTaxValue = new TotalTaxValue();
			subCodeLength += totalTaxValue.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalDiscountValue.tag)) {
			totalDiscountValue = new TotalDiscountValue();
			subCodeLength += totalDiscountValue.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalDiscountRefund.tag)) {
			totalDiscountRefund = new TotalDiscountRefund();
			subCodeLength += totalDiscountRefund.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalAdvisedChargeValueList.tag)) {
			totalAdvisedChargeValueList = new TotalAdvisedChargeValueList();
			subCodeLength += totalAdvisedChargeValueList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallEventDetailsCount.tag)) {
			callEventDetailsCount = new CallEventDetailsCount();
			subCodeLength += callEventDetailsCount.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(OperatorSpecInfoList.tag)) {
			operatorSpecInformation = new OperatorSpecInfoList();
			subCodeLength += operatorSpecInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (earliestCallTimeStamp != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("earliestCallTimeStamp: ");
			earliestCallTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (latestCallTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("latestCallTimeStamp: ");
			latestCallTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (totalCharge != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalCharge: ").append(totalCharge);
			firstSelectedElement = false;
		}
		
		if (totalChargeRefund != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalChargeRefund: ").append(totalChargeRefund);
			firstSelectedElement = false;
		}
		
		if (totalTaxRefund != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalTaxRefund: ").append(totalTaxRefund);
			firstSelectedElement = false;
		}
		
		if (totalTaxValue != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalTaxValue: ").append(totalTaxValue);
			firstSelectedElement = false;
		}
		
		if (totalDiscountValue != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalDiscountValue: ").append(totalDiscountValue);
			firstSelectedElement = false;
		}
		
		if (totalDiscountRefund != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalDiscountRefund: ").append(totalDiscountRefund);
			firstSelectedElement = false;
		}
		
		if (totalAdvisedChargeValueList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalAdvisedChargeValueList: ");
			totalAdvisedChargeValueList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (callEventDetailsCount != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callEventDetailsCount: ").append(callEventDetailsCount);
			firstSelectedElement = false;
		}
		
		if (operatorSpecInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("operatorSpecInformation: ");
			operatorSpecInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

