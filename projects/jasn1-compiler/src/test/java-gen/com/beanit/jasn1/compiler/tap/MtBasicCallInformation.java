/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class MtBasicCallInformation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 153);

	public byte[] code = null;
	private ChargeableSubscriber chargeableSubscriber = null;
	private RapFileSequenceNumber rapFileSequenceNumber = null;
	private CallOriginator callOriginator = null;
	private OriginatingNetwork originatingNetwork = null;
	private CallEventStartTimeStamp callEventStartTimeStamp = null;
	private TotalCallEventDuration totalCallEventDuration = null;
	private SimToolkitIndicator simToolkitIndicator = null;
	private CauseForTerm causeForTerm = null;
	
	public MtBasicCallInformation() {
	}

	public MtBasicCallInformation(byte[] code) {
		this.code = code;
	}

	public void setChargeableSubscriber(ChargeableSubscriber chargeableSubscriber) {
		this.chargeableSubscriber = chargeableSubscriber;
	}

	public ChargeableSubscriber getChargeableSubscriber() {
		return chargeableSubscriber;
	}

	public void setRapFileSequenceNumber(RapFileSequenceNumber rapFileSequenceNumber) {
		this.rapFileSequenceNumber = rapFileSequenceNumber;
	}

	public RapFileSequenceNumber getRapFileSequenceNumber() {
		return rapFileSequenceNumber;
	}

	public void setCallOriginator(CallOriginator callOriginator) {
		this.callOriginator = callOriginator;
	}

	public CallOriginator getCallOriginator() {
		return callOriginator;
	}

	public void setOriginatingNetwork(OriginatingNetwork originatingNetwork) {
		this.originatingNetwork = originatingNetwork;
	}

	public OriginatingNetwork getOriginatingNetwork() {
		return originatingNetwork;
	}

	public void setCallEventStartTimeStamp(CallEventStartTimeStamp callEventStartTimeStamp) {
		this.callEventStartTimeStamp = callEventStartTimeStamp;
	}

	public CallEventStartTimeStamp getCallEventStartTimeStamp() {
		return callEventStartTimeStamp;
	}

	public void setTotalCallEventDuration(TotalCallEventDuration totalCallEventDuration) {
		this.totalCallEventDuration = totalCallEventDuration;
	}

	public TotalCallEventDuration getTotalCallEventDuration() {
		return totalCallEventDuration;
	}

	public void setSimToolkitIndicator(SimToolkitIndicator simToolkitIndicator) {
		this.simToolkitIndicator = simToolkitIndicator;
	}

	public SimToolkitIndicator getSimToolkitIndicator() {
		return simToolkitIndicator;
	}

	public void setCauseForTerm(CauseForTerm causeForTerm) {
		this.causeForTerm = causeForTerm;
	}

	public CauseForTerm getCauseForTerm() {
		return causeForTerm;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (causeForTerm != null) {
			codeLength += causeForTerm.encode(reverseOS, true);
		}
		
		if (simToolkitIndicator != null) {
			codeLength += simToolkitIndicator.encode(reverseOS, true);
		}
		
		if (totalCallEventDuration != null) {
			codeLength += totalCallEventDuration.encode(reverseOS, true);
		}
		
		if (callEventStartTimeStamp != null) {
			codeLength += callEventStartTimeStamp.encode(reverseOS, true);
		}
		
		if (originatingNetwork != null) {
			codeLength += originatingNetwork.encode(reverseOS, true);
		}
		
		if (callOriginator != null) {
			codeLength += callOriginator.encode(reverseOS, true);
		}
		
		if (rapFileSequenceNumber != null) {
			codeLength += rapFileSequenceNumber.encode(reverseOS, true);
		}
		
		if (chargeableSubscriber != null) {
			codeLength += chargeableSubscriber.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(ChargeableSubscriber.tag)) {
			chargeableSubscriber = new ChargeableSubscriber();
			subCodeLength += chargeableSubscriber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RapFileSequenceNumber.tag)) {
			rapFileSequenceNumber = new RapFileSequenceNumber();
			subCodeLength += rapFileSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallOriginator.tag)) {
			callOriginator = new CallOriginator();
			subCodeLength += callOriginator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(OriginatingNetwork.tag)) {
			originatingNetwork = new OriginatingNetwork();
			subCodeLength += originatingNetwork.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CallEventStartTimeStamp.tag)) {
			callEventStartTimeStamp = new CallEventStartTimeStamp();
			subCodeLength += callEventStartTimeStamp.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalCallEventDuration.tag)) {
			totalCallEventDuration = new TotalCallEventDuration();
			subCodeLength += totalCallEventDuration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(SimToolkitIndicator.tag)) {
			simToolkitIndicator = new SimToolkitIndicator();
			subCodeLength += simToolkitIndicator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(CauseForTerm.tag)) {
			causeForTerm = new CauseForTerm();
			subCodeLength += causeForTerm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (chargeableSubscriber != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargeableSubscriber: ");
			chargeableSubscriber.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (rapFileSequenceNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rapFileSequenceNumber: ").append(rapFileSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (callOriginator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callOriginator: ");
			callOriginator.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (originatingNetwork != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("originatingNetwork: ").append(originatingNetwork);
			firstSelectedElement = false;
		}
		
		if (callEventStartTimeStamp != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callEventStartTimeStamp: ");
			callEventStartTimeStamp.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (totalCallEventDuration != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalCallEventDuration: ").append(totalCallEventDuration);
			firstSelectedElement = false;
		}
		
		if (simToolkitIndicator != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("simToolkitIndicator: ").append(simToolkitIndicator);
			firstSelectedElement = false;
		}
		
		if (causeForTerm != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("causeForTerm: ").append(causeForTerm);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

