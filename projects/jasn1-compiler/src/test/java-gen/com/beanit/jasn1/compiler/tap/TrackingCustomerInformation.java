/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class TrackingCustomerInformation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 298);

	public byte[] code = null;
	private TrackingCustomerIdList trackingCustomerIdList = null;
	private TrackingCustomerHomeIdList trackingCustomerHomeIdList = null;
	private TrackingCustomerLocList trackingCustomerLocList = null;
	private TrackingCustomerEquipment trackingCustomerEquipment = null;
	
	public TrackingCustomerInformation() {
	}

	public TrackingCustomerInformation(byte[] code) {
		this.code = code;
	}

	public void setTrackingCustomerIdList(TrackingCustomerIdList trackingCustomerIdList) {
		this.trackingCustomerIdList = trackingCustomerIdList;
	}

	public TrackingCustomerIdList getTrackingCustomerIdList() {
		return trackingCustomerIdList;
	}

	public void setTrackingCustomerHomeIdList(TrackingCustomerHomeIdList trackingCustomerHomeIdList) {
		this.trackingCustomerHomeIdList = trackingCustomerHomeIdList;
	}

	public TrackingCustomerHomeIdList getTrackingCustomerHomeIdList() {
		return trackingCustomerHomeIdList;
	}

	public void setTrackingCustomerLocList(TrackingCustomerLocList trackingCustomerLocList) {
		this.trackingCustomerLocList = trackingCustomerLocList;
	}

	public TrackingCustomerLocList getTrackingCustomerLocList() {
		return trackingCustomerLocList;
	}

	public void setTrackingCustomerEquipment(TrackingCustomerEquipment trackingCustomerEquipment) {
		this.trackingCustomerEquipment = trackingCustomerEquipment;
	}

	public TrackingCustomerEquipment getTrackingCustomerEquipment() {
		return trackingCustomerEquipment;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (trackingCustomerEquipment != null) {
			codeLength += trackingCustomerEquipment.encode(reverseOS, true);
		}
		
		if (trackingCustomerLocList != null) {
			codeLength += trackingCustomerLocList.encode(reverseOS, true);
		}
		
		if (trackingCustomerHomeIdList != null) {
			codeLength += trackingCustomerHomeIdList.encode(reverseOS, true);
		}
		
		if (trackingCustomerIdList != null) {
			codeLength += trackingCustomerIdList.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(TrackingCustomerIdList.tag)) {
			trackingCustomerIdList = new TrackingCustomerIdList();
			subCodeLength += trackingCustomerIdList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TrackingCustomerHomeIdList.tag)) {
			trackingCustomerHomeIdList = new TrackingCustomerHomeIdList();
			subCodeLength += trackingCustomerHomeIdList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TrackingCustomerLocList.tag)) {
			trackingCustomerLocList = new TrackingCustomerLocList();
			subCodeLength += trackingCustomerLocList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TrackingCustomerEquipment.tag)) {
			trackingCustomerEquipment = new TrackingCustomerEquipment();
			subCodeLength += trackingCustomerEquipment.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (trackingCustomerIdList != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trackingCustomerIdList: ");
			trackingCustomerIdList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (trackingCustomerHomeIdList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trackingCustomerHomeIdList: ");
			trackingCustomerHomeIdList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (trackingCustomerLocList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trackingCustomerLocList: ");
			trackingCustomerLocList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (trackingCustomerEquipment != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trackingCustomerEquipment: ");
			trackingCustomerEquipment.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

