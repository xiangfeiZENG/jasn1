/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class ServiceCentreUsage implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 12);

	public byte[] code = null;
	private ScuBasicInformation basicInformation = null;
	private RapFileSequenceNumber rapFileSequenceNumber = null;
	private ServingNetwork servingNetwork = null;
	private RecEntityCode recEntityCode = null;
	private ChargeInformation chargeInformation = null;
	private ScuChargeType scuChargeType = null;
	private ScuTimeStamps scuTimeStamps = null;
	private OperatorSpecInfoList operatorSpecInformation = null;
	
	public ServiceCentreUsage() {
	}

	public ServiceCentreUsage(byte[] code) {
		this.code = code;
	}

	public void setBasicInformation(ScuBasicInformation basicInformation) {
		this.basicInformation = basicInformation;
	}

	public ScuBasicInformation getBasicInformation() {
		return basicInformation;
	}

	public void setRapFileSequenceNumber(RapFileSequenceNumber rapFileSequenceNumber) {
		this.rapFileSequenceNumber = rapFileSequenceNumber;
	}

	public RapFileSequenceNumber getRapFileSequenceNumber() {
		return rapFileSequenceNumber;
	}

	public void setServingNetwork(ServingNetwork servingNetwork) {
		this.servingNetwork = servingNetwork;
	}

	public ServingNetwork getServingNetwork() {
		return servingNetwork;
	}

	public void setRecEntityCode(RecEntityCode recEntityCode) {
		this.recEntityCode = recEntityCode;
	}

	public RecEntityCode getRecEntityCode() {
		return recEntityCode;
	}

	public void setChargeInformation(ChargeInformation chargeInformation) {
		this.chargeInformation = chargeInformation;
	}

	public ChargeInformation getChargeInformation() {
		return chargeInformation;
	}

	public void setScuChargeType(ScuChargeType scuChargeType) {
		this.scuChargeType = scuChargeType;
	}

	public ScuChargeType getScuChargeType() {
		return scuChargeType;
	}

	public void setScuTimeStamps(ScuTimeStamps scuTimeStamps) {
		this.scuTimeStamps = scuTimeStamps;
	}

	public ScuTimeStamps getScuTimeStamps() {
		return scuTimeStamps;
	}

	public void setOperatorSpecInformation(OperatorSpecInfoList operatorSpecInformation) {
		this.operatorSpecInformation = operatorSpecInformation;
	}

	public OperatorSpecInfoList getOperatorSpecInformation() {
		return operatorSpecInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (operatorSpecInformation != null) {
			codeLength += operatorSpecInformation.encode(reverseOS, true);
		}
		
		if (scuTimeStamps != null) {
			codeLength += scuTimeStamps.encode(reverseOS, true);
		}
		
		if (scuChargeType != null) {
			codeLength += scuChargeType.encode(reverseOS, true);
		}
		
		if (chargeInformation != null) {
			codeLength += chargeInformation.encode(reverseOS, true);
		}
		
		if (recEntityCode != null) {
			codeLength += recEntityCode.encode(reverseOS, true);
		}
		
		if (servingNetwork != null) {
			codeLength += servingNetwork.encode(reverseOS, true);
		}
		
		if (rapFileSequenceNumber != null) {
			codeLength += rapFileSequenceNumber.encode(reverseOS, true);
		}
		
		if (basicInformation != null) {
			codeLength += basicInformation.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(ScuBasicInformation.tag)) {
			basicInformation = new ScuBasicInformation();
			subCodeLength += basicInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RapFileSequenceNumber.tag)) {
			rapFileSequenceNumber = new RapFileSequenceNumber();
			subCodeLength += rapFileSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ServingNetwork.tag)) {
			servingNetwork = new ServingNetwork();
			subCodeLength += servingNetwork.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(RecEntityCode.tag)) {
			recEntityCode = new RecEntityCode();
			subCodeLength += recEntityCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ChargeInformation.tag)) {
			chargeInformation = new ChargeInformation();
			subCodeLength += chargeInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ScuChargeType.tag)) {
			scuChargeType = new ScuChargeType();
			subCodeLength += scuChargeType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ScuTimeStamps.tag)) {
			scuTimeStamps = new ScuTimeStamps();
			subCodeLength += scuTimeStamps.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(OperatorSpecInfoList.tag)) {
			operatorSpecInformation = new OperatorSpecInfoList();
			subCodeLength += operatorSpecInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (basicInformation != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("basicInformation: ");
			basicInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (rapFileSequenceNumber != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rapFileSequenceNumber: ").append(rapFileSequenceNumber);
			firstSelectedElement = false;
		}
		
		if (servingNetwork != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingNetwork: ").append(servingNetwork);
			firstSelectedElement = false;
		}
		
		if (recEntityCode != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recEntityCode: ").append(recEntityCode);
			firstSelectedElement = false;
		}
		
		if (chargeInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargeInformation: ");
			chargeInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (scuChargeType != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scuChargeType: ");
			scuChargeType.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (scuTimeStamps != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scuTimeStamps: ");
			scuTimeStamps.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (operatorSpecInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("operatorSpecInformation: ");
			operatorSpecInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

