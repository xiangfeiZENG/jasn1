/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.tap;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;


public class TotalAdvisedChargeValue implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 360);

	public byte[] code = null;
	private AdvisedChargeCurrency advisedChargeCurrency = null;
	private TotalAdvisedCharge totalAdvisedCharge = null;
	private TotalAdvisedChargeRefund totalAdvisedChargeRefund = null;
	private TotalCommission totalCommission = null;
	private TotalCommissionRefund totalCommissionRefund = null;
	
	public TotalAdvisedChargeValue() {
	}

	public TotalAdvisedChargeValue(byte[] code) {
		this.code = code;
	}

	public void setAdvisedChargeCurrency(AdvisedChargeCurrency advisedChargeCurrency) {
		this.advisedChargeCurrency = advisedChargeCurrency;
	}

	public AdvisedChargeCurrency getAdvisedChargeCurrency() {
		return advisedChargeCurrency;
	}

	public void setTotalAdvisedCharge(TotalAdvisedCharge totalAdvisedCharge) {
		this.totalAdvisedCharge = totalAdvisedCharge;
	}

	public TotalAdvisedCharge getTotalAdvisedCharge() {
		return totalAdvisedCharge;
	}

	public void setTotalAdvisedChargeRefund(TotalAdvisedChargeRefund totalAdvisedChargeRefund) {
		this.totalAdvisedChargeRefund = totalAdvisedChargeRefund;
	}

	public TotalAdvisedChargeRefund getTotalAdvisedChargeRefund() {
		return totalAdvisedChargeRefund;
	}

	public void setTotalCommission(TotalCommission totalCommission) {
		this.totalCommission = totalCommission;
	}

	public TotalCommission getTotalCommission() {
		return totalCommission;
	}

	public void setTotalCommissionRefund(TotalCommissionRefund totalCommissionRefund) {
		this.totalCommissionRefund = totalCommissionRefund;
	}

	public TotalCommissionRefund getTotalCommissionRefund() {
		return totalCommissionRefund;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (totalCommissionRefund != null) {
			codeLength += totalCommissionRefund.encode(reverseOS, true);
		}
		
		if (totalCommission != null) {
			codeLength += totalCommission.encode(reverseOS, true);
		}
		
		if (totalAdvisedChargeRefund != null) {
			codeLength += totalAdvisedChargeRefund.encode(reverseOS, true);
		}
		
		if (totalAdvisedCharge != null) {
			codeLength += totalAdvisedCharge.encode(reverseOS, true);
		}
		
		if (advisedChargeCurrency != null) {
			codeLength += advisedChargeCurrency.encode(reverseOS, true);
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(AdvisedChargeCurrency.tag)) {
			advisedChargeCurrency = new AdvisedChargeCurrency();
			subCodeLength += advisedChargeCurrency.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalAdvisedCharge.tag)) {
			totalAdvisedCharge = new TotalAdvisedCharge();
			subCodeLength += totalAdvisedCharge.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalAdvisedChargeRefund.tag)) {
			totalAdvisedChargeRefund = new TotalAdvisedChargeRefund();
			subCodeLength += totalAdvisedChargeRefund.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalCommission.tag)) {
			totalCommission = new TotalCommission();
			subCodeLength += totalCommission.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TotalCommissionRefund.tag)) {
			totalCommissionRefund = new TotalCommissionRefund();
			subCodeLength += totalCommissionRefund.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (advisedChargeCurrency != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("advisedChargeCurrency: ").append(advisedChargeCurrency);
			firstSelectedElement = false;
		}
		
		if (totalAdvisedCharge != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalAdvisedCharge: ").append(totalAdvisedCharge);
			firstSelectedElement = false;
		}
		
		if (totalAdvisedChargeRefund != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalAdvisedChargeRefund: ").append(totalAdvisedChargeRefund);
			firstSelectedElement = false;
		}
		
		if (totalCommission != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalCommission: ").append(totalCommission);
			firstSelectedElement = false;
		}
		
		if (totalCommissionRefund != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalCommissionRefund: ").append(totalCommissionRefund);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

